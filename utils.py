import io
import base64
import logging
from typing import Optional, List, Dict, Any
from PIL import Image
import PyPDF2
import aiohttp

logger = logging.getLogger(__name__)

class FileProcessor:
    @staticmethod
    async def download_file(file_url: str) -> Optional[bytes]:
        """Download file from Telegram servers"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(file_url) as response:
                    if response.status == 200:
                        return await response.read()
                    else:
                        logger.error(f"Failed to download file: {response.status}")
                        return None
        except Exception as e:
            logger.error(f"Error downloading file: {e}")
            return None
    
    @staticmethod
    def process_image(image_data: bytes, mime_type: str) -> Optional[str]:
        """Process image and return base64 encoded data URL"""
        try:
            # Validate and optimize image
            image = Image.open(io.BytesIO(image_data))
            
            # Convert to RGB if necessary
            if image.mode != 'RGB':
                image = image.convert('RGB')
            
            # Resize if too large (max 1024x1024 for API efficiency)
            if image.width > 1024 or image.height > 1024:
                image.thumbnail((1024, 1024), Image.Resampling.LANCZOS)
            
            # Convert back to bytes
            output = io.BytesIO()
            image.save(output, format='JPEG', quality=85)
            processed_data = output.getvalue()
            
            # Encode as base64
            base64_data = base64.b64encode(processed_data).decode('utf-8')
            return f"data:image/jpeg;base64,{base64_data}"
        
        except Exception as e:
            logger.error(f"Error processing image: {e}")
            return None
    
    @staticmethod
    def process_pdf(pdf_data: bytes) -> Optional[str]:
        """Process PDF and return base64 encoded data URL"""
        try:
            # Validate PDF
            pdf_reader = PyPDF2.PdfReader(io.BytesIO(pdf_data))
            
            # Check if PDF has content
            if len(pdf_reader.pages) == 0:
                logger.error("PDF has no pages")
                return None
            
            # Encode as base64
            base64_data = base64.b64encode(pdf_data).decode('utf-8')
            return f"data:application/pdf;base64,{base64_data}"
        
        except Exception as e:
            logger.error(f"Error processing PDF: {e}")
            return None

class MessageFormatter:
    @staticmethod
    def format_welcome_message() -> str:
        """Format welcome message"""
        return """üëã –ü—Ä–∏–≤–µ—Ç! –Ø Telegram –±–æ—Ç –Ω–∞ –±–∞–∑–µ OpenRouter. –Ø –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–µ PDF –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚ùì /ask <–≤–∞—à_–≤–æ–ø—Ä–æ—Å> - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å (–º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
‚öôÔ∏è /setprompt <–≤–∞—à_–ø—Ä–æ–º–ø—Ç> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
üîÑ /resetprompt - –°–±—Ä–æ—Å–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
üìù /getprompt - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
üóëÔ∏è /resetcontext - –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞
ü§ñ /model - –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –ò–ò
üë§ /profile - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏ –ª–∏–º–∏—Ç—ã
‚≠êÔ∏è /upgrade - –û–±–Ω–æ–≤–∏—Ç—å—Å—è –¥–æ Plus —Ç–∞—Ä–∏—Ñ–∞"""
    
    @staticmethod
    def format_profile_message(profile: Dict[str, Any]) -> str:
        """Format user profile message"""
        tier_emoji = "‚≠êÔ∏è" if profile['tier'] == 'plus' else "üÜì"
        message = f"""üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**

üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: `{profile['user_id']}`
{tier_emoji} –¢–∞—Ä–∏—Ñ: {profile['tier'].title()}
üìä –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {profile['daily_remaining']}
üìà –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–µ—Å—è—Ü–µ: {profile['monthly_remaining']}
ü§ñ –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {profile['current_model']}"""
        
        if profile.get('subscription_end_date'):
            from datetime import datetime
            end_date = datetime.fromisoformat(profile['subscription_end_date'].replace('Z', '+00:00'))
            message += f"\nüìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {end_date.strftime('%d.%m.%Y')}"
        
        return message
    
    @staticmethod
    def format_upgrade_message() -> str:
        """Format upgrade message"""
        return """‚≠êÔ∏è **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ Plus —Ç–∞—Ä–∏—Ñ–∞**

–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Plus —Ç–∞—Ä–∏—Ñ–∞:
‚Ä¢ 50 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å (–≤–º–µ—Å—Ç–æ 10)
‚Ä¢ 500 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–µ—Å—è—Ü (–≤–º–µ—Å—Ç–æ 50)
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏—É–º –º–æ–¥–µ–ª—è–º
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞

–°—Ç–æ–∏–º–æ—Å—Ç—å: 300 Telegram Stars
–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 30 –¥–Ω–µ–π"""